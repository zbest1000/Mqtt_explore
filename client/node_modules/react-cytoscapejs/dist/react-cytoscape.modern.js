import e from"react";import t from"prop-types";import n from"cytoscape";const{string:o,array:l,object:s,number:a,bool:i,oneOfType:r,any:c,func:u}=t,d={id:o,className:o,style:r([o,s]),elements:r([l,c]),stylesheet:r([l,c]),layout:r([s,c]),pan:r([s,c]),zoom:a,panningEnabled:i,userPanningEnabled:i,minZoom:a,maxZoom:a,zoomingEnabled:i,userZoomingEnabled:i,boxSelectionEnabled:i,autoungrabify:i,autolock:i,autounselectify:i,get:u,toJson:u,diff:u,forEach:u,cy:u,headless:i,styleEnabled:i,hideEdgesOnViewport:i,textureOnViewport:i,motionBlur:i,motionBlurOpacity:a,wheelSensitivity:a,pixelRatio:r([o,s])},p=(e,t)=>{if(((e,t)=>null==e||null==t)(e,t)&&(null!=e||null!=t))return!0;if(e===t)return!1;if("object"!=typeof e||"object"!=typeof t)return e!==t;const n=Object.keys(e),o=Object.keys(t),l=n=>e[n]!==t[n];return n.length!==o.length||!(!n.some(l)&&!o.some(l))},m=(e,t)=>null!=e?e[t]:null,y={diff:p,get:m,toJson:e=>e,forEach:(e,t)=>e.forEach(t),elements:[{data:{id:"a",label:"Example node A"}},{data:{id:"b",label:"Example node B"}},{data:{id:"e",source:"a",target:"b"}}],stylesheet:[{selector:"node",style:{label:"data(label)"}}],zoom:1,pan:{x:0,y:0}},h=(e,t,n,o)=>n(m(e,o),m(t,o)),b=(e,t,n,o,l,s,a)=>{e.batch(()=>{(o===p||h(t,n,o,"elements"))&&x(e,m(t,"elements"),m(n,"elements"),l,s,a,o),h(t,n,o,"stylesheet")&&E(e,m(t,"stylesheet"),m(n,"stylesheet"),l),["zoom","minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","pan","panningEnabled","userPanningEnabled","boxSelectionEnabled","autoungrabify","autolock","autounselectify"].forEach(s=>{h(t,n,o,s)&&f(e,s,m(t,s),m(n,s),l)})}),h(t,n,o,"layout")&&g(e,m(t,"layout"),m(n,"layout"),l)},f=(e,t,n,o,l)=>{e[t](l(o))},g=(e,t,n,o)=>{const l=o(n);null!=l&&e.layout(l).run()},E=(e,t,n,o)=>{const l=e.style();null!=l&&l.fromJson(o(n)).update()},x=(e,t,n,o,l,s,a)=>{const i=[],r=e.collection(),c=[],u={},d={},p=e=>l(l(e,"data"),"id");s(n,e=>{const t=p(e);d[t]=e}),null!=t&&s(t,t=>{const n=p(t);u[n]=t,(e=>null!=d[e])(n)||r.merge(e.getElementById(n))}),s(n,e=>{const t=p(e),n=(e=>u[e])(t);(e=>null!=u[e])(t)?c.push({ele1:n,ele2:e}):i.push(o(e))}),r.length>0&&e.remove(r),i.length>0&&e.add(i),c.forEach(({ele1:t,ele2:n})=>O(e,t,n,o,l,a))},O=(e,t,n,o,l,s)=>{const a=l(l(n,"data"),"id"),i=e.getElementById(a),r={};["data","position","selected","selectable","locked","grabbable","classes"].forEach(e=>{const a=l(n,e);s(a,l(t,e))&&(r[e]=o(a))});const c=l(n,"scratch");s(c,l(t,"scratch"))&&i.scratch(o(c)),Object.keys(r).length>0&&i.json(r)};class w extends e.Component{static get propTypes(){return d}static get defaultProps(){return y}static normalizeElements(e){if(null!=e.length)return e;{let{nodes:t,edges:n}=e;return null==t&&(t=[]),null==n&&(n=[]),t.concat(n)}}constructor(t){super(t),this.displayName="CytoscapeComponent",this.containerRef=e.createRef()}componentDidMount(){const e=this.containerRef.current,{global:t,headless:o,styleEnabled:l,hideEdgesOnViewport:s,textureOnViewport:a,motionBlur:i,motionBlurOpacity:r,wheelSensitivity:c,pixelRatio:u}=this.props,d=this._cy=new n({container:e,headless:o,styleEnabled:l,hideEdgesOnViewport:s,textureOnViewport:a,motionBlur:i,motionBlurOpacity:r,wheelSensitivity:c,pixelRatio:u});t&&(window[t]=d),this.updateCytoscape(null,this.props)}updateCytoscape(e,t){const n=this._cy,{diff:o,toJson:l,get:s,forEach:a}=t;b(n,e,t,o,l,s,a),null!=t.cy&&t.cy(n)}componentDidUpdate(e){this.updateCytoscape(e,this.props)}componentWillUnmount(){this._cy.destroy()}render(){const{id:t,className:n,style:o}=this.props;return e.createElement("div",{ref:this.containerRef,id:t,className:n,style:o})}}export{w as default};
//# sourceMappingURL=react-cytoscape.modern.js.map
