{"version":3,"file":"react-cytoscape.modern.js","sources":["../src/types.js","../src/diff.js","../src/json.js","../src/defaults.js","../src/patch.js","../src/component.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst { string, array, object, number, bool, oneOfType, any, func } = PropTypes;\n\nexport const types = {\n  /**\n   * The `id` HTML attribute of the component.\n   * */\n  id: string,\n\n  /**\n   * The `class` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation via a style block in your CSS file.\n   */\n  className: string,\n\n  /**\n   * The `style` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation if you do not use separate CSS files.\n   */\n  style: oneOfType([string, object]),\n\n  /**\n   * The flat list of Cytoscape elements to be included in the graph, each represented\n   * as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * elements: [\n   *   { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *   { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *   { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#notation/elements-json\n   * */\n  elements: oneOfType([array, any]),\n\n  /**\n   * The Cytoscape stylesheet as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * stylesheet: [\n   *   {\n   *      selector: 'node',\n   *      style: {\n   *        'width': 30,\n   *        'height': 30,\n   *        'shape': 'rectangle'\n   *      }\n   *   }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#style\n   */\n  stylesheet: oneOfType([array, any]),\n\n  /**\n   * Use a layout to automatically position the nodes in the graph.  E.g.\n   *\n   * ```\n   * layout: { name: 'random' }\n   * ```\n   *\n   * N.b. to use an external layout extension, you must register the extension\n   * prior to rendering this component, e.g.:\n   *\n   * ```\n   * import Cytoscape from 'cytoscape';\n   * import COSEBilkent from 'cytoscape-cose-bilkent';\n   * import React from 'react';\n   * import CytoscapeComponent from 'cytoscape-reactjs';\n   *\n   * Cytoscape.use(COSEBilkent);\n   *\n   * class MyApp extends React.Component {\n   *   render() {\n   *     const elements = [\n   *       { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *       { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *       { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   *     ];\n   *\n   *     const layout = { name: 'cose-bilkent' };\n   *\n   *     return <CytoscapeComponent elements={elements} layout={layout}>;\n   *   }\n   * }\n   * ```\n   *\n   * See http://js.cytoscape.org/#layouts\n   */\n  layout: oneOfType([object, any]),\n\n  /**\n   * The panning position of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/pan\n   */\n  pan: oneOfType([object, any]),\n\n  /**\n   * The zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoom\n   */\n  zoom: number,\n\n  /**\n   * Whether the panning position of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/panningEnabled\n   */\n  panningEnabled: bool,\n\n  /**\n   * Whether the panning position of the graph is mutable by user gestures (e.g. swipe).\n   *\n   * See http://js.cytoscape.org/#init-opts/userPanningEnabled\n   */\n  userPanningEnabled: bool,\n\n  /**\n   * The minimum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/minZoom\n   */\n  minZoom: number,\n\n  /**\n   * The maximum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/maxZoom\n   */\n  maxZoom: number,\n\n  /**\n   * Whether the zoom level of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoomingEnabled\n   */\n  zoomingEnabled: bool,\n\n  /**\n   * Whether the zoom level of the graph is mutable by user gestures (e.g. pinch-to-zoom).\n   *\n   * See http://js.cytoscape.org/#init-opts/userZoomingEnabled\n   */\n  userZoomingEnabled: bool,\n\n  /**\n   * Whether shift+click-and-drag box selection is enabled.\n   *\n   * See http://js.cytoscape.org/#init-opts/boxSelectionEnabled\n   */\n  boxSelectionEnabled: bool,\n\n  /**\n   * If true, nodes automatically can not be grabbed regardless of whether\n   * each node is marked as grabbable.\n   *\n   * See http://js.cytoscape.org/#init-opts/autoungrabify\n   */\n  autoungrabify: bool,\n\n  /**\n   * If true, nodes can not be moved at all.\n   *\n   * See http://js.cytoscape.org/#init-opts/autolock\n   */\n  autolock: bool,\n\n  /**\n   * If true, elements have immutable selection state.\n   *\n   * See http://js.cytoscape.org/#init-opts/autounselectify\n   */\n  autounselectify: bool,\n\n  /**\n   * `get(object, key)`\n   * Get the value of the specified `object` at the `key`, which may be an integer\n   * in the case of lists/arrays or strings in the case of maps/objects.\n   */\n  get: func,\n\n  /**\n   * `toJson(object)`\n   * Get the deep value of the specified `object` as non-stringified JSON.\n   */\n  toJson: func,\n\n  /**\n   * diff(objectA, objectB)\n   * Return whether the two objects have equal value. This is used to determine if\n   * and where Cytoscape needs to be patched.\n   */\n  diff: func,\n\n  /**\n   * forEach(list, iterator)\n   * Call `iterator` on each element in the `list`, in order.\n   */\n  forEach: func,\n\n  /**\n   * cy(cyRef)\n   * The `cy` prop allows for getting a reference to the `cy` Cytoscape object, e.g.:\n   *\n   * `<CytoscapeComponent cy={cy => (myCyRef = cy)} />`\n   */\n  cy: func,\n\n  /**\n   * headless\n   * The `headless` proper allows for setting whether the Cytoscape instance is headless, i.e.\n   * not rendered.  This value can not be changed after initialisation of the component.\n   */\n  headless: bool,\n\n  /**\n   * styleEnabled\n   * The `styleEnabled` flag is used to enable style functionality in a headless instance (i.e.\n   * `headless: true, styleEnabled: true`).  For a rendered instance, do not set this value.\n   */\n  styleEnabled: bool,\n\n  /**\n   * hideEdgesOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether edges should\n   * be hidden during zoom and pan operations.\n   */\n  hideEdgesOnViewport: bool,\n\n  /**\n   * textureOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether a preview\n   * based on the existing scene should be used in place of building a new scene.\n   */\n  textureOnViewport: bool,\n\n  /**\n   * motionBlur\n   * A rendering hint that specifies, for renderers which support the hint, whether a motion blur\n   * effect should be applied.\n   */\n  motionBlur: bool,\n\n  /**\n   * motionBlurOpacity\n   * A rendering hint that specifies, for renderers which support the hint, how strong the motion\n   * blur effect should be.  The value ranges from 0 to 1, with larger values indicating larger\n   * strength.\n   */\n  motionBlurOpacity: number,\n\n  /**\n   * wheelSensitivity\n   * A rendering hint that specifies, for renderers which support the hint, how fast wheel zooming\n   * should be.  The value is a positive multiplier.  Do not set this value unless you are using\n   * unconventional hardware and can guarantee that all your users will use the same hardware.  The\n   * default value works well for standard mice on common operating systems.  If you change this\n   * value, it is very likely that you will create a bad user experience for many or most of your\n   * users.\n   */\n  wheelSensitivity: number,\n\n  /**\n   * pixelRatio\n   * A rendering hint that specifies, for renderers which support the hint, the pixel ratio that\n   * should be used.  May be 'auto' or a positive number.\n   */\n  pixelRatio: oneOfType([string, object]),\n};\n","const eitherIsNil = (a, b) => a == null || b == null;\n\nexport const hashDiff = (a, b) => {\n  return eitherIsNil(a, b) || a.hash() !== b.hash();\n};\n\nexport const shallowObjDiff = (a, b) => {\n  if (eitherIsNil(a, b) && !(a == null && b == null)) {\n    return true;\n  }\n\n  if (a === b) {\n    // can't do a diff on the same obj\n    return false;\n  }\n\n  // non-object values can be compared with the equality operator\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return a !== b;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  const mismatches = (key) => a[key] !== b[key];\n\n  if (aKeys.length !== bKeys.length) {\n    return true;\n  }\n\n  if (aKeys.some(mismatches) || bKeys.some(mismatches)) {\n    return true;\n  }\n\n  return false;\n};\n","export const get = (obj, key) => (obj != null ? obj[key] : null);\n\nexport const toJson = (obj) => obj;\n\nexport const forEach = (arr, iterator) => arr.forEach(iterator);\n","import { shallowObjDiff } from './diff';\nimport { get, toJson, forEach } from './json';\n\nexport const identity = (x) => x;\n\nexport const elements = [\n  { data: { id: 'a', label: 'Example node A' } },\n  { data: { id: 'b', label: 'Example node B' } },\n  { data: { id: 'e', source: 'a', target: 'b' } },\n];\n\nexport const stylesheet = [\n  {\n    selector: 'node',\n    style: {\n      label: 'data(label)',\n    },\n  },\n];\n\nexport const zoom = 1;\n\nexport const pan = {\n  x: 0,\n  y: 0,\n};\n\nexport const defaults = {\n  diff: shallowObjDiff,\n  get,\n  toJson,\n  forEach,\n  elements,\n  stylesheet,\n  zoom,\n  pan,\n};\n","import { get as atKey } from './json';\nimport { shallowObjDiff } from './diff';\n\nconst isDiffAtKey = (json1, json2, diff, key) =>\n  diff(atKey(json1, key), atKey(json2, key));\n\nexport const patch = (cy, json1, json2, diff, toJson, get, forEach) => {\n  cy.batch(() => {\n    // The shallow object diff() must defer to patchElements() as it must compare the\n    // elements as an unordered set.  A custom diff(), with Immutable for example,\n    // could just use an equality check (===).\n    if (\n      diff === shallowObjDiff ||\n      isDiffAtKey(json1, json2, diff, 'elements')\n    ) {\n      patchElements(\n        cy,\n        atKey(json1, 'elements'),\n        atKey(json2, 'elements'),\n        toJson,\n        get,\n        forEach,\n        diff\n      );\n    }\n\n    if (isDiffAtKey(json1, json2, diff, 'stylesheet')) {\n      patchStyle(\n        cy,\n        atKey(json1, 'stylesheet'),\n        atKey(json2, 'stylesheet'),\n        toJson\n      );\n    }\n\n    [\n      // simple keys that can be patched directly (key same as fn name)\n      'zoom',\n      'minZoom',\n      'maxZoom',\n      'zoomingEnabled',\n      'userZoomingEnabled',\n      'pan',\n      'panningEnabled',\n      'userPanningEnabled',\n      'boxSelectionEnabled',\n      'autoungrabify',\n      'autolock',\n      'autounselectify',\n    ].forEach((key) => {\n      if (isDiffAtKey(json1, json2, diff, key)) {\n        patchJson(cy, key, atKey(json1, key), atKey(json2, key), toJson);\n      }\n    });\n  });\n\n  if (isDiffAtKey(json1, json2, diff, 'layout')) {\n    patchLayout(cy, atKey(json1, 'layout'), atKey(json2, 'layout'), toJson);\n  }\n};\n\nconst patchJson = (cy, key, val1, val2, toJson) => {\n  cy[key](toJson(val2));\n};\n\nconst patchLayout = (cy, layout1, layout2, toJson) => {\n  const layoutOpts = toJson(layout2);\n\n  if (layoutOpts != null) {\n    cy.layout(layoutOpts).run();\n  }\n};\n\nconst patchStyle = (cy, style1, style2, toJson) => {\n  const style = cy.style();\n\n  if (style == null) {\n    return;\n  }\n\n  style.fromJson(toJson(style2)).update();\n};\n\nconst patchElements = (cy, eles1, eles2, toJson, get, forEach, diff) => {\n  const toAdd = [];\n  const toRm = cy.collection();\n  const toPatch = [];\n  const eles1Map = {};\n  const eles2Map = {};\n  const eles1HasId = (id) => eles1Map[id] != null;\n  const eles2HasId = (id) => eles2Map[id] != null;\n  const getEle1 = (id) => eles1Map[id];\n  const getId = (ele) => get(get(ele, 'data'), 'id');\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n\n    eles2Map[id] = ele2;\n  });\n\n  if (eles1 != null) {\n    forEach(eles1, (ele1) => {\n      const id = getId(ele1);\n\n      eles1Map[id] = ele1;\n\n      if (!eles2HasId(id)) {\n        toRm.merge(cy.getElementById(id));\n      }\n    });\n  }\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n    const ele1 = getEle1(id);\n\n    if (eles1HasId(id)) {\n      toPatch.push({ ele1, ele2 });\n    } else {\n      toAdd.push(toJson(ele2));\n    }\n  });\n\n  if (toRm.length > 0) {\n    cy.remove(toRm);\n  }\n\n  if (toAdd.length > 0) {\n    cy.add(toAdd);\n  }\n\n  toPatch.forEach(({ ele1, ele2 }) =>\n    patchElement(cy, ele1, ele2, toJson, get, diff)\n  );\n};\n\nconst patchElement = (cy, ele1, ele2, toJson, get, diff) => {\n  const id = get(get(ele2, 'data'), 'id');\n  const cyEle = cy.getElementById(id);\n  const patch = {};\n  const jsonKeys = [\n    'data',\n    'position',\n    'selected',\n    'selectable',\n    'locked',\n    'grabbable',\n    'classes',\n  ];\n\n  jsonKeys.forEach((key) => {\n    const data2 = get(ele2, key);\n\n    if (diff(data2, get(ele1, key))) {\n      patch[key] = toJson(data2);\n    }\n  });\n\n  const scratch2 = get(ele2, 'scratch');\n  if (diff(scratch2, get(ele1, 'scratch'))) {\n    cyEle.scratch(toJson(scratch2));\n  }\n\n  if (Object.keys(patch).length > 0) {\n    cyEle.json(patch);\n  }\n};\n","import React from 'react';\nimport { types } from './types';\nimport { defaults } from './defaults';\nimport Cytoscape from 'cytoscape';\nimport { patch } from './patch';\n\n/**\n * The `CytoscapeComponent` is a React component that allows for the declarative creation\n * and modification of a Cytoscape instance, a graph visualisation.\n */\nexport default class CytoscapeComponent extends React.Component {\n  static get propTypes() {\n    return types;\n  }\n\n  static get defaultProps() {\n    return defaults;\n  }\n\n  static normalizeElements(elements) {\n    const isArray = elements.length != null;\n\n    if (isArray) {\n      return elements;\n    } else {\n      let { nodes, edges } = elements;\n\n      if (nodes == null) {\n        nodes = [];\n      }\n\n      if (edges == null) {\n        edges = [];\n      }\n\n      return nodes.concat(edges);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.displayName = 'CytoscapeComponent';\n    this.containerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.containerRef.current;\n\n    const {\n      global,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    } = this.props;\n\n    const cy = (this._cy = new Cytoscape({\n      container,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    }));\n\n    if (global) {\n      window[global] = cy;\n    }\n\n    this.updateCytoscape(null, this.props);\n  }\n\n  updateCytoscape(prevProps, newProps) {\n    const cy = this._cy;\n    const { diff, toJson, get, forEach } = newProps;\n\n    patch(cy, prevProps, newProps, diff, toJson, get, forEach);\n\n    if (newProps.cy != null) {\n      newProps.cy(cy);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCytoscape(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n\n  render() {\n    const { id, className, style } = this.props;\n\n    return React.createElement('div', {\n      ref: this.containerRef,\n      id,\n      className,\n      style,\n    });\n  }\n}\n"],"names":["string","array","object","number","bool","oneOfType","any","func","PropTypes","types","id","className","style","elements","stylesheet","layout","pan","zoom","panningEnabled","userPanningEnabled","minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","boxSelectionEnabled","autoungrabify","autolock","autounselectify","get","toJson","diff","forEach","cy","headless","styleEnabled","hideEdgesOnViewport","textureOnViewport","motionBlur","motionBlurOpacity","wheelSensitivity","pixelRatio","shallowObjDiff","a","b","eitherIsNil","Object","keys","bKeys","mismatches","key","aKeys","length","some","obj","defaults","arr","iterator","data","label","source","target","selector","x","y","isDiffAtKey","json1","json2","atKey","patch","batch","patchElements","patchStyle","patchJson","patchLayout","val1","val2","layout1","layout2","layoutOpts","run","style1","style2","fromJson","update","eles1","eles2","toRm","collection","eles1Map","eles2Map","getId","ele","ele2","ele1","eles2HasId","merge","getElementById","getEle1","eles1HasId","toPatch","push","toAdd","remove","add","patchElement","cyEle","data2","scratch2","scratch","json","CytoscapeComponent","React","Component","defaultProps","static","nodes","edges","concat","constructor","props","super","this","displayName","containerRef","createRef","componentDidMount","container","current","global","_cy","Cytoscape","window","updateCytoscape","prevProps","newProps","componentDidUpdate","componentWillUnmount","destroy","render","createElement","ref"],"mappings":"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"}